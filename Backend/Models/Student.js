import mongoose from 'mongoose';

const studentSchema = new mongoose.Schema({
  studentId: { type: String, unique: true }, // Student ID in "STD1234" format
  userId: {
    type: mongoose.Schema.Types.ObjectId,
    ref: 'User',
    required: true,
  },
  name: { type: String, required: true },
  email: { type: String, required: true },
  phone: { type: String, required: true },
  password: { type: String, required: true },
  course: { type: String, required: true },
  year: { type: String, required: true },
  status: { type: String, enum: ['Active', 'Inactive'], default: 'Active' },
  address: { type: String },
  image: { type: String },
  faceId: { type: String }, // Field for storing face ID generated by facial recognition
}, { timestamps: true });

// Helper function to generate a random 4-digit student ID
const generateRandomStudentId = () => {
  const randomDigits = Math.floor(1000 + Math.random() * 9000); // Random 4-digit number
  return `STD${randomDigits}`;
};

// Generate studentId and faceId before saving
studentSchema.pre('save', async function (next) {
  if (this.isNew) {
    // Generate a random studentId in the format STDXXXX (e.g., STD1234)
    let studentId = generateRandomStudentId();

    // Ensure that the generated studentId is unique
    while (await mongoose.model('Student').findOne({ studentId })) {
      studentId = generateRandomStudentId(); // Regenerate if ID already exists
    }

    this.studentId = studentId;

    // Generate faceId based on the studentId (can be improved with real facial recognition logic)
    this.faceId = `FACE${studentId}`; // Example faceId generation logic
  }
  next();
});

export default mongoose.model('Student', studentSchema);
